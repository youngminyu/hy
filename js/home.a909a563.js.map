{"version":3,"file":"js/home.a909a563.js","mappings":"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","sources":["webpack://ins/./src/views/HomeView.vue","webpack://ins/src/views/HomeView.vue","webpack://ins/./src/views/HomeView.vue?a9b6","webpack://ins/./src/views/HomeView.vue?aae2","webpack://ins/./node_modules/paho-mqtt/paho-mqtt.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"containerFrame\"},[_c('div',{staticClass:\"tabBox\"},[_c('v-tabs',{model:{value:(_vm.tabIdx),callback:function ($$v) {_vm.tabIdx=$$v},expression:\"tabIdx\"}},_vm._l((_vm.tabs),function(item){return _c('v-tab',{key:item},[_vm._v(\" \"+_vm._s(item)+\" \")])}),1)],1),_vm._l((_vm.tabs),function(item,idx){return _c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.tabIdx === idx ? item : ''),expression:\"tabIdx === idx ? item : ''\"}],key:idx,staticClass:\"fix\"},[(item === 'Dashboard')?_c('div',{staticClass:\"component\"},[(_vm.connect === false)?_c('div',{staticClass:\"dashboardConnecting\"},[_vm._v(\" 대시보드에 접속중입니다. \")]):_vm._e(),_c('div',{staticClass:\"mqttCardBox\"},_vm._l((_vm.mqttList),function(item,idx){return _c('dl',{key:idx,staticClass:\"card\"},[_c('dt',[_vm._v(_vm._s(item.name))]),_c('dd',[_c('ul',_vm._l((item.list),function(msg,prop){return _c('li',{key:prop},[_c('span',[_vm._v(_vm._s(prop))]),_c('span',[_vm._v(_vm._s(msg))])])}),0)])])}),0)]):_vm._e()])})],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"containerFrame\">\n    <div class=\"tabBox\">\n      <v-tabs v-model=\"tabIdx\">\n        <v-tab v-for=\"item in tabs\" :key=\"item\">\n          {{ item }}\n        </v-tab>\n      </v-tabs>\n    </div>\n\n    <div\n      class=\"fix\"\n      v-for=\"(item, idx) in tabs\"\n      :key=\"idx\"\n      v-show=\"tabIdx === idx ? item : ''\"\n    >\n      <!--  -->\n      <div class=\"component\" v-if=\"item === 'Dashboard'\">\n        <div class=\"dashboardConnecting\" v-if=\"connect === false\">\n          대시보드에 접속중입니다.\n        </div>\n        <div class=\"mqttCardBox\">\n          <dl class=\"card\" v-for=\"(item, idx) in mqttList\" :key=\"idx\">\n            <dt>{{ item.name }}</dt>\n            <dd>\n              <ul>\n                <li v-for=\"(msg, prop) in item.list\" :key=\"prop\">\n                  <span>{{ prop }}</span>\n                  <span>{{ msg }}</span>\n                </li>\n              </ul>\n            </dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nimport * as paho_mqtt from \"paho-mqtt\";\n\nimport { useMqttStore } from \"@/stories/mainStore.js\";\n\nexport default {\n  name: \"HomeView\",\n  components: {},\n  setup() {\n    const mqttController = useMqttStore();\n\n    const tabIdx = ref(0);\n    const tabs = ref([\"Dashboard\"]);\n\n    const mqttList = ref([]);\n    const connect = ref(false);\n\n    let Paho = {};\n    Paho.MQTT = paho_mqtt;\n\n    console.log(\"connecting ...\");\n    // Create a client instance\n    const client_id =\n      \"breez-web-demo-\" + Math.floor(Math.random() * 8999 + 1000);\n\n    const client = new Paho.MQTT.Client(\n      \"ec2-13-125-216-141.ap-northeast-2.compute.amazonaws.com\",\n      // \"ws\",\n      1884,\n      client_id\n    );\n    mqttController.setClient(client);\n    client.onConnectionLost = onConnectionLost;\n    client.onMessageArrived = onMessageArrived;\n    client.connect({\n      // clientId: client_id,\n      // protocol: \"mqtt\",\n      // userName: \"test\",\n      // password: \"test\",\n      // mqttVersion: 3,\n      onSuccess: onConnect,\n      onFailure(error) {\n        console.log(\"fail\", error);\n      },\n      // , useSSL: true\n    });\n\n    function onConnect() {\n      // console.log(\"onConnect\");\n      connect.value = true;\n      client.subscribe(\"tv_local\"); //토픽 설정\n    }\n\n    function onConnectionLost(responseObject) {\n      if (responseObject.errorCode != 0) {\n        console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n      }\n    }\n\n    function onMessageArrived(message) {\n      const payload = JSON.parse(message.payloadString);\n      const arr = [];\n      arr.push({\n        name: \"Longitude\",\n        list: {\n          longitudeDegrees: payload.longitudeDegrees,\n          longitudeMinutes: payload.longitudeMinutes,\n          longitudeSeconds: payload.longitudeSeconds,\n        },\n      });\n\n      arr.push({\n        name: \"Latitude\",\n        list: {\n          LatitudeDegrees: payload.LatitudeDegrees,\n          LatitudeMinutes: payload.LatitudeMinutes,\n          LatitudeSeconds: payload.LatitudeSeconds,\n        },\n      });\n\n      arr.push({\n        name: \"Speed\",\n        list: {\n          SourceTime: payload.SourceTime,\n          SpeedLonWaterSpd: payload.SpeedLonWaterSpd,\n          SpeedSogKnots: payload.SpeedSogKnots,\n        },\n      });\n      mqttList.value = arr;\n    }\n\n    return {\n      connect,\n\n      tabs,\n      tabIdx,\n\n      mqttList,\n    };\n  },\n};\n</script>\n\n<style></style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HomeView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HomeView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./HomeView.vue?vue&type=template&id=17ce9e15&\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js&\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nvar client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  var message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n\tif(typeof exports === \"object\" && typeof module === \"object\"){\n\t\tmodule.exports = factory();\n\t} else if (typeof define === \"function\" && define.amd){\n\t\tdefine(factory);\n\t} else if (typeof exports === \"object\"){\n\t\texports = factory();\n\t} else {\n\t\t//if (typeof root.Paho === \"undefined\"){\n\t\t//\troot.Paho = {};\n\t\t//}\n\t\troot.Paho = factory();\n\t}\n})(this, function LibraryFactory(){\n\n\n\tvar PahoMQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module.\n\tvar version = \"@VERSION@-@BUILDLEVEL@\";\n\n\t/**\n\t * @private\n\t */\n\tvar localStorage = global.localStorage || (function () {\n\t\tvar data = {};\n\n\t\treturn {\n\t\t\tsetItem: function (key, item) { data[key] = item; },\n\t\t\tgetItem: function (key) { return data[key]; },\n\t\t\tremoveItem: function (key) { delete data[key]; },\n\t\t};\n\t})();\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar MESSAGE_TYPE = {\n\t\t\tCONNECT: 1,\n\t\t\tCONNACK: 2,\n\t\t\tPUBLISH: 3,\n\t\t\tPUBACK: 4,\n\t\t\tPUBREC: 5,\n\t\t\tPUBREL: 6,\n\t\t\tPUBCOMP: 7,\n\t\t\tSUBSCRIBE: 8,\n\t\t\tSUBACK: 9,\n\t\t\tUNSUBSCRIBE: 10,\n\t\t\tUNSUBACK: 11,\n\t\t\tPINGREQ: 12,\n\t\t\tPINGRESP: 13,\n\t\t\tDISCONNECT: 14\n\t\t};\n\n\t\t// Collection of utility methods used to simplify module code\n\t\t// and promote the DRY pattern.\n\n\t\t/**\n\t * Validate an object's parameter names to ensure they\n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj.\n\t * @throws {Error} Invalid option parameter found.\n\t * @private\n\t */\n\t\tvar validate = function(obj, keys) {\n\t\t\tfor (var key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\t\tfor (var validKey in keys)\n\t\t\t\t\t\t\tif (keys.hasOwnProperty(validKey))\n\t\t\t\t\t\t\t\terrorStr = errorStr+\" \"+validKey;\n\t\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope.\n\t * @param {function} User function\n\t * @param {object} Function scope\n\t * @return {function} User function bound to another scope\n\t * @private\n\t */\n\t\tvar scope = function (f, scope) {\n\t\t\treturn function () {\n\t\t\t\treturn f.apply(scope, arguments);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar ERROR = {\n\t\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"},\n\t\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t\t\tBUFFER_FULL: {code:18, text:\"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"},\n\t\t};\n\n\t\t/** CONNACK RC Meaning. */\n\t\tvar CONNACK_RC = {\n\t\t\t0:\"Connection Accepted\",\n\t\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t\t2:\"Connection Refused: identifier rejected\",\n\t\t\t3:\"Connection Refused: server unavailable\",\n\t\t\t4:\"Connection Refused: bad user name or password\",\n\t\t\t5:\"Connection Refused: not authorized\"\n\t\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\t\tvar format = function(error, substitutions) {\n\t\t\tvar text = error.text;\n\t\t\tif (substitutions) {\n\t\t\t\tvar field,start;\n\t\t\t\tfor (var i=0; i<substitutions.length; i++) {\n\t\t\t\t\tfield = \"{\"+i+\"}\";\n\t\t\t\t\tstart = text.indexOf(field);\n\t\t\t\t\tif(start > 0) {\n\t\t\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\t\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\t\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\n\t\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t *\n\t * Optional properties\n\t *\n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *\n\t * \"Flag\" properties\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\t\tvar WireMessage = function (type, options) {\n\t\t\tthis.type = type;\n\t\t\tfor (var name in options) {\n\t\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\t\tthis[name] = options[name];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\t\tvar first = ((this.type & 0x0f) << 4);\n\n\t\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\t\tvar remLength = 0;\n\t\t\tvar topicStrLength = [];\n\t\t\tvar destinationNameLength = 0;\n\t\t\tvar willMessagePayloadBytes;\n\n\t\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tremLength += 2;\n\n\t\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\twillMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now we can allocate a buffer for the message\n\n\t\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t\t//Write the fixed header into the buffer\n\t\t\tbyteStream[0] = first;\n\t\t\tbyteStream.set(mbi,1);\n\n\t\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\n\t\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar connectFlags = 0;\n\t\t\t\tif (this.cleanSession)\n\t\t\t\t\tconnectFlags = 0x02;\n\t\t\t\tif (this.willMessage !== undefined ) {\n\t\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tconnectFlags |= 0x80;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tconnectFlags |= 0x40;\n\t\t\t\tbyteStream[pos++] = connectFlags;\n\t\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t\t}\n\n\t\t\t// Output the messageIdentifier - if there is one\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\n\t\t\t\tbreak;\n\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREC:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREL:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t};\n\n\t\tfunction decodeMessage(input,pos) {\n\t\t\tvar startingPos = pos;\n\t\t\tvar first = input[pos];\n\t\t\tvar type = first >> 4;\n\t\t\tvar messageInfo = first &= 0x0f;\n\t\t\tpos += 1;\n\n\n\t\t\t// Decode the remaining length (MBI format)\n\n\t\t\tvar digit;\n\t\t\tvar remLength = 0;\n\t\t\tvar multiplier = 1;\n\t\t\tdo {\n\t\t\t\tif (pos == input.length) {\n\t\t\t\t\treturn [null,startingPos];\n\t\t\t\t}\n\t\t\t\tdigit = input[pos++];\n\t\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\t\tmultiplier *= 128;\n\t\t\t} while ((digit & 0x80) !== 0);\n\n\t\t\tvar endPos = pos+remLength;\n\t\t\tif (endPos > input.length) {\n\t\t\t\treturn [null,startingPos];\n\t\t\t}\n\n\t\t\tvar wireMessage = new WireMessage(type);\n\t\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\n\t\t\t\tvar message = new Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01)\n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\n\t\t\tcase  MESSAGE_TYPE.PUBREL:\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn [wireMessage,endPos];\n\t\t}\n\n\t\tfunction writeUint16(input, buffer, offset) {\n\t\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\t\tbuffer[offset++] = input % 256;     //LSB\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\t\tstringToUTF8(input, buffer, offset);\n\t\t\treturn offset + utf8Length;\n\t\t}\n\n\t\tfunction readUint16(buffer, offset) {\n\t\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t\t}\n\n\t\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private\n\t */\n\t\tfunction encodeMBI(number) {\n\t\t\tvar output = new Array(1);\n\t\t\tvar numBytes = 0;\n\n\t\t\tdo {\n\t\t\t\tvar digit = number % 128;\n\t\t\t\tnumber = number >> 7;\n\t\t\t\tif (number > 0) {\n\t\t\t\t\tdigit |= 0x80;\n\t\t\t\t}\n\t\t\t\toutput[numBytes++] = digit;\n\t\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\t\tfunction UTF8Length(input) {\n\t\t\tvar output = 0;\n\t\t\tfor (var i = 0; i<input.length; i++)\n\t\t\t{\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t{\n\t\t\t\t\t// Surrogate pair means its a 4 byte character\n\t\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\toutput++;\n\t\t\t\t\t}\n\t\t\t\t\toutput +=3;\n\t\t\t\t}\n\t\t\t\telse if (charCode > 0x7F)\n\t\t\t\t\toutput +=2;\n\t\t\t\telse\n\t\t\t\t\toutput++;\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\t\tfunction stringToUTF8(input, output, start) {\n\t\t\tvar pos = start;\n\t\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\n\t\t\t\t// Check for a surrogate pair.\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t\t}\n\t\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\n\t\t\t\t}\n\n\t\t\t\tif (charCode <= 0x7F) {\n\t\t\t\t\toutput[pos++] = charCode;\n\t\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else if (charCode <= 0xFFFF) {\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else {\n\t\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\tfunction parseUTF8(input, offset, length) {\n\t\t\tvar output = \"\";\n\t\t\tvar utf16;\n\t\t\tvar pos = offset;\n\n\t\t\twhile (pos < offset+length)\n\t\t\t{\n\t\t\t\tvar byte1 = input[pos++];\n\t\t\t\tif (byte1 < 128)\n\t\t\t\t\tutf16 = byte1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\t\tif (byte2 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\t\tif (byte3 < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar byte4 = input[pos++]-128;\n\t\t\t\t\t\t\tif (byte4 < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\tif (byte1 < 0xF8)        // 4 byte character\n\t\t\t\t\t\t\t\tutf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t\t\telse                     // longer encodings are not supported\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t{\n\t\t\t\t\tutf16 -= 0x10000;\n\t\t\t\t\toutput += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\tutf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t}\n\t\t\t\toutput += String.fromCharCode(utf16);\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\t\tvar Pinger = function(client, keepAliveInterval) {\n\t\t\tthis._client = client;\n\t\t\tthis._keepAliveInterval = keepAliveInterval*1000;\n\t\t\tthis.isReset = false;\n\n\t\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n\t\t\tvar doTimeout = function (pinger) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn doPing.apply(pinger);\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/** @ignore */\n\t\t\tvar doPing = function() {\n\t\t\t\tif (!this.isReset) {\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t\t} else {\n\t\t\t\t\tthis.isReset = false;\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\t\tthis._client.socket.send(pingReq);\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.reset = function() {\n\t\t\t\tthis.isReset = true;\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t};\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\t\tvar Timeout = function(client, timeoutSeconds, action, args) {\n\t\t\tif (!timeoutSeconds)\n\t\t\t\ttimeoutSeconds = 30;\n\n\t\t\tvar doTimeout = function (action, client, args) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn action.apply(client, args);\n\t\t\t\t};\n\t\t\t};\n\t\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t/**\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t *\n\t * @name Paho.ClientImpl @constructor\n\t * @param {String} host the DNS nameof the webSocket host.\n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\t\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\t\tif (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t\t}\n\t\t\tif (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t\t}\n\t\t\tthis._trace(\"Paho.Client\", uri, host, port, path, clientId);\n\n\t\t\tthis.host = host;\n\t\t\tthis.port = port;\n\t\t\tthis.path = path;\n\t\t\tthis.uri = uri;\n\t\t\tthis.clientId = clientId;\n\t\t\tthis._wsuri = null;\n\n\t\t\t// Local storagekeys are qualified with the following string.\n\t\t\t// The conditional inclusion of path in the key is for backward\n\t\t\t// compatibility to when the path was not configurable and assumed to\n\t\t\t// be /mqtt\n\t\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t\t// Create private instance-only message queue\n\t\t\t// Internal queue of messages to be sent, in sending order.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\n\t\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\t\t\tthis._sentMessages = {};\n\n\t\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t\t// indexed by their respective message ids.\n\t\t\tthis._receivedMessages = {};\n\n\t\t\t// Internal list of callbacks to be executed when messages\n\t\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\t// Unique identifier for SEND messages, incrementing\n\t\t\t// counter as messages are sent.\n\t\t\tthis._message_identifier = 1;\n\n\t\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\t\tthis._sequence = 0;\n\n\n\t\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.\n\t\t\tfor (var key in localStorage)\n\t\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) === 0 || key.indexOf(\"Received:\"+this._localKey) === 0)\n\t\t\t\t\tthis.restore(key);\n\t\t};\n\n\t\t// Messaging Client public instance members.\n\t\tClientImpl.prototype.host = null;\n\t\tClientImpl.prototype.port = null;\n\t\tClientImpl.prototype.path = null;\n\t\tClientImpl.prototype.uri = null;\n\t\tClientImpl.prototype.clientId = null;\n\n\t\t// Messaging Client private instance members.\n\t\tClientImpl.prototype.socket = null;\n\t\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\t\tClientImpl.prototype.connected = false;\n\t\t/* The largest message identifier allowed, may not be larger than 2**16 but\n\t\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t\t */\n\t\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\t\tClientImpl.prototype.connectOptions = null;\n\t\tClientImpl.prototype.hostIndex = null;\n\t\tClientImpl.prototype.onConnected = null;\n\t\tClientImpl.prototype.onConnectionLost = null;\n\t\tClientImpl.prototype.onMessageDelivered = null;\n\t\tClientImpl.prototype.onMessageArrived = null;\n\t\tClientImpl.prototype.traceFunction = null;\n\t\tClientImpl.prototype._msg_queue = null;\n\t\tClientImpl.prototype._buffered_msg_queue = null;\n\t\tClientImpl.prototype._connectTimeout = null;\n\t\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\t\tClientImpl.prototype.sendPinger = null;\n\t\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\t\tClientImpl.prototype.receivePinger = null;\n\t\tClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n\t\tClientImpl.prototype._reconnecting = false;\n\t\tClientImpl.prototype._reconnectTimeout = null;\n\t\tClientImpl.prototype.disconnectedPublishing = false;\n\t\tClientImpl.prototype.disconnectedBufferSize = 5000;\n\n\t\tClientImpl.prototype.receiveBuffer = null;\n\n\t\tClientImpl.prototype._traceBuffer = null;\n\t\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\t\tClientImpl.prototype.connect = function (connectOptions) {\n\t\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\t\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n\t\t\tif (this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\tif (this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// connect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process to use new connect options.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tthis.connectOptions = connectOptions;\n\t\t\tthis._reconnectInterval = 1;\n\t\t\tthis._reconnecting = false;\n\t\t\tif (connectOptions.uris) {\n\t\t\t\tthis.hostIndex = 0;\n\t\t\t\tthis._doConnect(connectOptions.uris[0]);\n\t\t\t} else {\n\t\t\t\tthis._doConnect(this.uri);\n\t\t\t}\n\n\t\t};\n\n\t\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n            if (subscribeOptions.qos === undefined)\n                subscribeOptions.qos = 0;\n            wireMessage.requestedQos = [];\n            for (var i = 0; i < wireMessage.topics.length; i++)\n                wireMessage.requestedQos[i] = subscribeOptions.qos;\n\n\t\t\tif (subscribeOptions.onSuccess) {\n\t\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.onFailure) {\n\t\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode, errorMessage:format(errorCode)});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:subscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All subscriptions return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {\n\t\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n\n\t\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t\t}\n\t\t\tif (unsubscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All unsubscribes return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.send = function (message) {\n\t\t\tthis._trace(\"Client.send\", message);\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\t\twireMessage.payloadMessage = message;\n\n\t\t\tif (this.connected) {\n\t\t\t// Mark qos 1 & 2 message as \"ACK required\"\n\t\t\t// For qos 0 message, invoke onMessageDelivered callback if there is one.\n\t\t\t// Then schedule the message.\n\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t} else if (this.onMessageDelivered) {\n\t\t\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tthis._schedule_message(wireMessage);\n\t\t\t} else {\n\t\t\t// Currently disconnected, will not schedule this message\n\t\t\t// Check if reconnecting is in progress and disconnected publish is enabled.\n\t\t\t\tif (this._reconnecting && this.disconnectedPublishing) {\n\t\t\t\t// Check the limit which include the \"required ACK\" messages\n\t\t\t\t\tvar messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n\t\t\t\t\tif (messageCount > this.disconnectedBufferSize) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\t\t// Mark this message as \"ACK required\"\n\t\t\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\t\t\t\t\tthis._buffered_msg_queue.unshift(wireMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.disconnect = function () {\n\t\t\tthis._trace(\"Client.disconnect\");\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// disconnect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tif (!this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t\t// in case of a failure later on in the disconnect processing.\n\t\t\t// as a consequence, the _disconected call back may be run several times.\n\t\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.getTraceLog = function () {\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\t\tfor (var key in this._sentMessages)\n\t\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\n\t\t\t\treturn this._traceBuffer;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.startTrace = function () {\n\t\t\tif ( this._traceBuffer === null ) {\n\t\t\t\tthis._traceBuffer = [];\n\t\t\t}\n\t\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t\t};\n\n\t\tClientImpl.prototype.stopTrace = function () {\n\t\t\tdelete this._traceBuffer;\n\t\t};\n\n\t\tClientImpl.prototype._doConnect = function (wsurl) {\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n\t\t\tif (this.connectOptions.useSSL) {\n\t\t\t\tvar uriParts = wsurl.split(\":\");\n\t\t\t\turiParts[0] = \"wss\";\n\t\t\t\twsurl = uriParts.join(\":\");\n\t\t\t}\n\t\t\tthis._wsuri = wsurl;\n\t\t\tthis.connected = false;\n\n\n\n\t\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t\t} else {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t\t}\n\t\t\tthis.socket.binaryType = \"arraybuffer\";\n\t\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\n\t\t\tthis.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tthis.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\t\t\tthis._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t\t};\n\n\n\t\t// Schedule a new message to be sent over the WebSockets\n\t\t// connection. CONNECT messages cause WebSocket connection\n\t\t// to be started. All other messages are queued internally\n\t\t// until this has happened. When WS connection starts, process\n\t\t// all outstanding messages.\n\t\tClientImpl.prototype._schedule_message = function (message) {\n\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\tthis._msg_queue.unshift(message);\n\t\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\t\t\tif (this.connected) {\n\t\t\t\tthis._process_queue();\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif(wireMessage.pubRecReceived)\n\t\t\t\t\tstoredMessage.pubRecReceived = true;\n\n\t\t\t\t// Convert the payload to a hex string.\n\t\t\t\tstoredMessage.payloadMessage = {};\n\t\t\t\tvar hex = \"\";\n\t\t\t\tvar messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t\tfor (var i=0; i<messageBytes.length; i++) {\n\t\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t\t\thex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\t\telse\n\t\t\t\t\t\thex = hex+messageBytes[i].toString(16);\n\t\t\t\t}\n\t\t\t\tstoredMessage.payloadMessage.payloadHex = hex;\n\n\t\t\t\tstoredMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t\tstoredMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t\tif (wireMessage.payloadMessage.duplicate)\n\t\t\t\t\tstoredMessage.payloadMessage.duplicate = true;\n\t\t\t\tif (wireMessage.payloadMessage.retained)\n\t\t\t\t\tstoredMessage.payloadMessage.retained = true;\n\n\t\t\t\t// Add a sequence number to sent messages.\n\t\t\t\tif ( prefix.indexOf(\"Sent:\") === 0 ) {\n\t\t\t\t\tif ( wireMessage.sequence === undefined )\n\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\tstoredMessage.sequence = wireMessage.sequence;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [prefix+this._localKey+wireMessage.messageIdentifier, storedMessage]));\n\t\t\t}\n\t\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t\t};\n\n\t\tClientImpl.prototype.restore = function(key) {\n\t\t\tvar value = localStorage.getItem(key);\n\t\t\tvar storedMessage = JSON.parse(value);\n\n\t\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n\t\t\tswitch(storedMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// Replace the payload message with a Message object.\n\t\t\t\tvar hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t\tvar buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (hex.length >= 2) {\n\t\t\t\t\tvar x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t\thex = hex.substring(2, hex.length);\n\t\t\t\t\tbyteStream[i++] = x;\n\t\t\t\t}\n\t\t\t\tvar payloadMessage = new Message(byteStream);\n\n\t\t\t\tpayloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t\tpayloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t\tif (storedMessage.payloadMessage.duplicate)\n\t\t\t\t\tpayloadMessage.duplicate = true;\n\t\t\t\tif (storedMessage.payloadMessage.retained)\n\t\t\t\t\tpayloadMessage.retained = true;\n\t\t\t\twireMessage.payloadMessage = payloadMessage;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t\t}\n\n\t\t\tif (key.indexOf(\"Sent:\"+this._localKey) === 0) {\n\t\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t} else if (key.indexOf(\"Received:\"+this._localKey) === 0) {\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._process_queue = function () {\n\t\t\tvar message = null;\n\n\t\t\t// Send all queued messages down socket connection\n\t\t\twhile ((message = this._msg_queue.pop())) {\n\t\t\t\tthis._socket_send(message);\n\t\t\t\t// Notify listeners that message was successfully sent\n\t\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\t\tthis._message_identifier++;\n\t\t\t}\n\t\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t\t}\n\t\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\t\tthis._message_identifier = 1;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_open = function () {\n\t\t// Create the CONNECT message object.\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n\t\t\twireMessage.clientId = this.clientId;\n\t\t\tthis._socket_send(wireMessage);\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_message = function (event) {\n\t\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t\tvar messages = this._deframeMessages(event.data);\n\t\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t\t\tthis._handleMessage(messages[i]);\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._deframeMessages = function(data) {\n\t\t\tvar byteArray = new Uint8Array(data);\n\t\t\tvar messages = [];\n\t\t\tif (this.receiveBuffer) {\n\t\t\t\tvar newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t\t\t\tnewData.set(this.receiveBuffer);\n\t\t\t\tnewData.set(byteArray,this.receiveBuffer.length);\n\t\t\t\tbyteArray = newData;\n\t\t\t\tdelete this.receiveBuffer;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvar offset = 0;\n\t\t\t\twhile(offset < byteArray.length) {\n\t\t\t\t\tvar result = decodeMessage(byteArray,offset);\n\t\t\t\t\tvar wireMessage = result[0];\n\t\t\t\t\toffset = result[1];\n\t\t\t\t\tif (wireMessage !== null) {\n\t\t\t\t\t\tmessages.push(wireMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offset < byteArray.length) {\n\t\t\t\t\tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn messages;\n\t\t};\n\n\t\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\n\t\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\t\ttry {\n\t\t\t\tswitch(wireMessage.type) {\n\t\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\tif (this._reconnectTimeout)\n\t\t\t\t\t\tthis._reconnectTimeout.cancel();\n\n\t\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\t\tfor (var key in this._sentMessages) {\n\t\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t\t}\n\t\t\t\t\t// Client connected and ready for business.\n\t\t\t\t\tif (wireMessage.returnCode === 0) {\n\n\t\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\n\t\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resend messages.\n\t\t\t\t\tvar sequencedMessages = [];\n\t\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Also schedule qos 0 buffered messages if any\n\t\t\t\t\tif (this._buffered_msg_queue.length > 0) {\n\t\t\t\t\t\tvar msg = null;\n\t\t\t\t\t\twhile ((msg = this._buffered_msg_queue.pop())) {\n\t\t\t\t\t\t\tsequencedMessages.push(msg);\n\t\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\t\tthis._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\t\t// Will also now return if this connection was the result of an automatic\n\t\t\t\t\t// reconnect and which URI was successfully connected to.\n\t\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar reconnected = false;\n\t\t\t\t\tif (this._reconnecting) {\n\t\t\t\t\t\treconnected = true;\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnecting = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the onConnected callback if there is one.\n\t\t\t\t\tthis._connected(reconnected, this._wsuri);\n\n\t\t\t\t\t// Process all queued messages now that the connection is established.\n\t\t\t\t\tthis._process_queue();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (receivedMessage) {\n\t\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis._schedule_message(pubCompMessage);\n\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\t// This will need to be fixed when we add multiple topic support\n\t\t\t\t\t\tif (wireMessage.returnCode[0] === 0x80) {\n\t\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\t\tthis.sendPinger.reset();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_error = function (error) {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_close = function () {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._socket_send = function (wireMessage) {\n\n\t\t\tif (wireMessage.type == 1) {\n\t\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\t\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t\t}\n\t\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\n\t\t\tthis.socket.send(wireMessage.encode());\n\t\t\t/* We have proved to the server we are alive. */\n\t\t\tthis.sendPinger.reset();\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\t\tif (this.onMessageArrived) {\n\t\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has connected.\n\t * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n\t * @param {uri} [string] fully qualified WebSocket URI of the server.\n\t */\n\t\tClientImpl.prototype._connected = function (reconnect, uri) {\n\t\t// Execute the onConnected callback if there is one.\n\t\t\tif (this.onConnected)\n\t\t\t\tthis.onConnected(reconnect, uri);\n\t\t};\n\n\t\t/**\n\t * Attempts to reconnect the client to the server.\n   * For each reconnect attempt, will double the reconnect interval\n   * up to 128 seconds.\n\t */\n\t\tClientImpl.prototype._reconnect = function () {\n\t\t\tthis._trace(\"Client._reconnect\");\n\t\t\tif (!this.connected) {\n\t\t\t\tthis._reconnecting = true;\n\t\t\t\tthis.sendPinger.cancel();\n\t\t\t\tthis.receivePinger.cancel();\n\t\t\t\tif (this._reconnectInterval < 128)\n\t\t\t\t\tthis._reconnectInterval = this._reconnectInterval * 2;\n\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\n\t\t\tif (errorCode !== undefined && this._reconnecting) {\n\t\t\t\t//Continue automatic reconnect process\n\t\t\t\tthis._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendPinger.cancel();\n\t\t\tthis.receivePinger.cancel();\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\n\t\t\t// Clear message buffers.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\t\tthis.socket.onopen = null;\n\t\t\t\tthis.socket.onmessage = null;\n\t\t\t\tthis.socket.onerror = null;\n\t\t\t\tthis.socket.onclose = null;\n\t\t\t\tif (this.socket.readyState === 1)\n\t\t\t\t\tthis.socket.close();\n\t\t\t\tdelete this.socket;\n\t\t\t}\n\n\t\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\t\tthis.hostIndex++;\n\t\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\t} else {\n\n\t\t\t\tif (errorCode === undefined) {\n\t\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t\t}\n\n\t\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.connected = false;\n\t\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.\n\t\t\t\t\tif (this.onConnectionLost) {\n\t\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText, reconnect:this.connectOptions.reconnect, uri:this._wsuri});\n\t\t\t\t\t}\n\t\t\t\t\tif (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n\t\t\t\t\t// Start automatic reconnect process for the very first time since last successful connect.\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnect();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\");\n\t\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\t\tif (this.traceFunction) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tfor (var i in args)\n\t\t\t\t{\n\t\t\t\t\tif (typeof args[i] !== \"undefined\")\n\t\t\t\t\t\targs.splice(i, 1, JSON.stringify(args[i]));\n\t\t\t\t}\n\t\t\t\tvar record = args.join(\"\");\n\t\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t\t}\n\n\t\t\t//buffer style trace\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {\n\t\t\t\t\t\tthis._traceBuffer.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\t\tvar traceObjectMasked = {};\n\t\t\tfor (var attr in traceObject) {\n\t\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\t\tif (attr == masked)\n\t\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn traceObjectMasked;\n\t\t};\n\n\t\t// ------------------------------------------------------------------------\n\t\t// Public Programming interface.\n\t\t// ------------------------------------------------------------------------\n\n\t\t/**\n\t * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish.\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n\t * (even though the underlying protocol exchange might be synchronous in nature).\n\t * This means they signal their completion by calling back to the application,\n\t * via Success or Failure callback functions provided by the application on the method in question.\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n\t * that are defined on the {@link Paho.Client} object.\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n\t *\n\t * @name Paho.Client\n\t *\n\t * @constructor\n\t *\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t *\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost.\n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network\n\t *                            cause the client to be disconnected. The disconnect call back may be called without\n\t *                            the connectionComplete call back being invoked if, for example the client fails to\n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>\n\t *                            <li>errorCode\n\t *                            <li>errorMessage\n\t *                            </ol>\n\t * @property {function} onMessageDelivered - called when a message has been delivered.\n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked.\n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that was delivered.\n\t *                            </ol>\n\t * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that has arrived.\n\t *                            </ol>\n\t * @property {function} onConnected - called when a connection is successfully made to the server.\n\t *                                  after a connect() method.\n\t *                                  Parameters passed to the onConnected callback are:\n\t *                                  <ol>\n\t *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n\t *                                  <li>URI (string) - The URI used to connect to the server.</li>\n\t *                                  </ol>\n\t * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n\t *                                            in the event that the connection to the server is lost.\n\t * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n\t *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n\t * @property {function} trace - called whenever trace is called. TODO\n\t */\n\t\tvar Client = function (host, port, path, clientId) {\n\n\t\t\tvar uri;\n\n\t\t\tif (typeof host !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t// host: must be full ws:// uri\n\t\t\t// port: clientId\n\t\t\t\tclientId = port;\n\t\t\t\turi = host;\n\t\t\t\tvar match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t\t\t\tif (match) {\n\t\t\t\t\thost = match[4]||match[2];\n\t\t\t\t\tport = parseInt(match[7]);\n\t\t\t\t\tpath = match[8];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (arguments.length == 3) {\n\t\t\t\t\tclientId = path;\n\t\t\t\t\tpath = \"/mqtt\";\n\t\t\t\t}\n\t\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\t\tif (typeof path !== \"string\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\n\t\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") !== -1 && host.slice(0,1) !== \"[\" && host.slice(-1) !== \"]\");\n\t\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t}\n\n\t\t\tvar clientIdLength = 0;\n\t\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\t\tvar charCode = clientId.charCodeAt(i);\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {\n\t\t\t\t\ti++; // Surrogate pair.\n\t\t\t\t}\n\t\t\t\tclientIdLength++;\n\t\t\t}\n\t\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n\n\t\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\n\t\t\t//Public Properties\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"host\":{\n\t\t\t\t\tget: function() { return host; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"port\":{\n\t\t\t\t\tget: function() { return port; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"path\":{\n\t\t\t\t\tget: function() { return path; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"uri\":{\n\t\t\t\t\tget: function() { return uri; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"clientId\":{\n\t\t\t\t\tget: function() { return client.clientId; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"onConnected\":{\n\t\t\t\t\tget: function() { return client.onConnected; },\n\t\t\t\t\tset: function(newOnConnected) {\n\t\t\t\t\t\tif (typeof newOnConnected === \"function\")\n\t\t\t\t\t\t\tclient.onConnected = newOnConnected;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedPublishing\":{\n\t\t\t\t\tget: function() { return client.disconnectedPublishing; },\n\t\t\t\t\tset: function(newDisconnectedPublishing) {\n\t\t\t\t\t\tclient.disconnectedPublishing = newDisconnectedPublishing;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedBufferSize\":{\n\t\t\t\t\tget: function() { return client.disconnectedBufferSize; },\n\t\t\t\t\tset: function(newDisconnectedBufferSize) {\n\t\t\t\t\t\tclient.disconnectedBufferSize = newDisconnectedBufferSize;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onConnectionLost\":{\n\t\t\t\t\tget: function() { return client.onConnectionLost; },\n\t\t\t\t\tset: function(newOnConnectionLost) {\n\t\t\t\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageDelivered\":{\n\t\t\t\t\tget: function() { return client.onMessageDelivered; },\n\t\t\t\t\tset: function(newOnMessageDelivered) {\n\t\t\t\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageArrived\":{\n\t\t\t\t\tget: function() { return client.onMessageArrived; },\n\t\t\t\t\tset: function(newOnMessageArrived) {\n\t\t\t\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"trace\":{\n\t\t\t\t\tget: function() { return client.traceFunction; },\n\t\t\t\t\tset: function(trace) {\n\t\t\t\t\t\tif(typeof trace === \"function\"){\n\t\t\t\t\t\t\tclient.traceFunction = trace;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t/**\n\t\t * Connect this Messaging client to its server.\n\t\t *\n\t\t * @name Paho.Client#connect\n\t\t * @function\n\t\t * @param {object} connectOptions - Attributes used with the connection.\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n\t\t * </ol>\n\t * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.\n\t\t * </ol>\n\t * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n\t * to the server if the connection is lost.\n\t *<ul>\n\t *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n\t * connection is lost.</li>\n\t *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n\t * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n\t * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n\t *</ul>\n\t * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n\t *<ul>\n\t *<li>3 - MQTT V3.1</li>\n\t *<li>4 - MQTT V3.1.1</li>\n\t *</ul>\n\t * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n\t * selected MQTT Version or will fail to connect.\n\t * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n\t * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n\t * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n\t * the hosts array will be converted to uris and will overwrite this property.\n\t\t * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\t\tthis.connect = function (connectOptions) {\n\t\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\tuserName:\"string\",\n\t\t\t\t\tpassword:\"string\",\n\t\t\t\t\twillMessage:\"object\",\n\t\t\t\t\tkeepAliveInterval:\"number\",\n\t\t\t\t\tcleanSession:\"boolean\",\n\t\t\t\t\tuseSSL:\"boolean\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\thosts:\"object\",\n\t\t\t\t\tports:\"object\",\n\t\t\t\t\treconnect:\"boolean\",\n\t\t\t\t\tmqttVersion:\"number\",\n\t\t\t\t\tmqttVersionExplicit:\"boolean\",\n\t\t\t\t\turis: \"object\"});\n\n\t\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t\t}\n\n\t\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t\t}\n\n\t\t\t\t//Check that if password is set, so is username\n\t\t\t\tif (connectOptions.password !== undefined && connectOptions.userName === undefined)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n\n\t\t\t\tif (connectOptions.willMessage) {\n\t\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\t\tconnectOptions.willMessage.stringPayload = null;\n\n\t\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t\t}\n\t\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\t\tif (connectOptions.hosts) {\n\n\t\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\n\t\t\t\t\tvar usingURIs = false;\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!usingURIs) {\n\t\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (connectOptions.hosts.length !== connectOptions.ports.length)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\n\t\t\t\t\t\tconnectOptions.uris = [];\n\n\t\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\n\t\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") !== -1);\n\t\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclient.connect(connectOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.\n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.\n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\t\tvalidate(subscribeOptions,  {qos:\"number\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t\t\t\t\t\t\t\t\t\t  or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the\n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.\n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t *\n\t\t * @name Paho.Client#send\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.send = function (topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Publish a message to the consumers of the destination in the Message.\n\t\t * Synonym for Paho.Mqtt.Client#send\n\t\t *\n\t\t * @name Paho.Client#publish\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be published.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.publish = function(topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t *\n\t\t * @name Paho.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.\n\t\t */\n\t\t\tthis.disconnect = function () {\n\t\t\t\tclient.disconnect();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Get the contents of the trace log.\n\t\t *\n\t\t * @name Paho.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\t\tthis.getTraceLog = function () {\n\t\t\t\treturn client.getTraceLog();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Start tracing.\n\t\t *\n\t\t * @name Paho.Client#startTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.startTrace = function () {\n\t\t\t\tclient.startTrace();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Stop tracing.\n\t\t *\n\t\t * @name Paho.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.stopTrace = function () {\n\t\t\t\tclient.stopTrace();\n\t\t\t};\n\n\t\t\tthis.isConnected = function() {\n\t\t\t\treturn client.connected;\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t *\n\t * @name Paho.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.\n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t *                     A received message has the retained boolean set to true if the message was published\n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published.\n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n\t *                     This is only set on messages received from the server.\n\t *\n\t */\n\t\tvar Message = function (newPayload) {\n\t\t\tvar payload;\n\t\t\tif (   typeof newPayload === \"string\" ||\n\t\tnewPayload instanceof ArrayBuffer ||\n\t\t(ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView))\n\t\t\t) {\n\t\t\t\tpayload = newPayload;\n\t\t\t} else {\n\t\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t\t}\n\n\t\t\tvar destinationName;\n\t\t\tvar qos = 0;\n\t\t\tvar retained = false;\n\t\t\tvar duplicate = false;\n\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"payloadString\":{\n\t\t\t\t\tenumerable : true,\n\t\t\t\t\tget : function () {\n\t\t\t\t\t\tif (typeof payload === \"string\")\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn parseUTF8(payload, 0, payload.length);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"payloadBytes\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tif (typeof payload === \"string\") {\n\t\t\t\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\t\t\t\treturn byteStream;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"destinationName\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newDestinationName) {\n\t\t\t\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\t\t\t\tdestinationName = newDestinationName;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"qos\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return qos; },\n\t\t\t\t\tset: function(newQos) {\n\t\t\t\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\t\t\t\tqos = newQos;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"retained\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return retained; },\n\t\t\t\t\tset: function(newRetained) {\n\t\t\t\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\t\t\t\tretained = newRetained;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"topic\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newTopic) {destinationName=newTopic;}\n\t\t\t\t},\n\t\t\t\t\"duplicate\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return duplicate; },\n\t\t\t\t\tset: function(newDuplicate) {duplicate=newDuplicate;}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Module contents.\n\t\treturn {\n\t\t\tClient: Client,\n\t\t\tMessage: Message\n\t\t};\n\t// eslint-disable-next-line no-nested-ternary\n\t})(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\treturn PahoMQTT;\n});\n"],"names":["staticClass","model","tabIdx","callback","expression","_vm","_v","_l","_c","directives","name","rawName","key","mqttList","prop","_s","msg","staticRenderFns","components","setup","Paho","console","client_id","connect","client","arr","list","longitudeDegrees","longitudeMinutes","longitudeSeconds","LatitudeDegrees","LatitudeMinutes","LatitudeSeconds","SourceTime","SpeedLonWaterSpd","SpeedSogKnots","mqttController","onSuccess","onFailure","tabs","component","render","root","factory","module","exports","this","PahoMQTT","global","version","localStorage","data","setItem","item","getItem","removeItem","MESSAGE_TYPE","CONNECT","CONNACK","PUBLISH","PUBACK","PUBREC","PUBREL","PUBCOMP","SUBSCRIBE","SUBACK","UNSUBSCRIBE","UNSUBACK","PINGREQ","PINGRESP","DISCONNECT","validate","obj","keys","hasOwnProperty","errorStr","validKey","Error","format","ERROR","INVALID_TYPE","scope","f","apply","arguments","OK","code","text","CONNECT_TIMEOUT","SUBSCRIBE_TIMEOUT","UNSUBSCRIBE_TIMEOUT","PING_TIMEOUT","INTERNAL_ERROR","CONNACK_RETURNCODE","SOCKET_ERROR","SOCKET_CLOSE","MALFORMED_UTF","UNSUPPORTED","INVALID_STATE","INVALID_ARGUMENT","UNSUPPORTED_OPERATION","INVALID_STORED_DATA","INVALID_MQTT_MESSAGE_TYPE","MALFORMED_UNICODE","BUFFER_FULL","CONNACK_RC","error","substitutions","field","start","i","length","indexOf","part1","substring","part2","MqttProtoIdentifierv3","MqttProtoIdentifierv4","WireMessage","type","options","decodeMessage","input","pos","digit","startingPos","first","messageInfo","remLength","multiplier","endPos","wireMessage","connectAcknowledgeFlags","sessionPresent","returnCode","qos","len","readUint16","topicName","parseUTF8","messageIdentifier","message","Message","subarray","retained","duplicate","destinationName","payloadMessage","writeUint16","buffer","offset","writeString","utf8Length","stringToUTF8","encodeMBI","number","output","Array","numBytes","UTF8Length","charCode","charCodeAt","lowCharCode","isNaN","utf16","byte1","byte2","toString","byte3","byte4","String","fromCharCode","prototype","encode","willMessagePayloadBytes","topicStrLength","destinationNameLength","undefined","mqttVersion","clientId","willMessage","payloadBytes","Uint8Array","byteLength","userName","password","topics","requestedQos","ArrayBuffer","mbi","byteStream","set","connectFlags","cleanSession","keepAliveInterval","Pinger","_client","_keepAliveInterval","isReset","pingReq","doTimeout","pinger","doPing","_trace","socket","send","timeout","setTimeout","_disconnected","reset","clearTimeout","cancel","Timeout","timeoutSeconds","action","args","ClientImpl","uri","host","port","path","WebSocket","_wsuri","_localKey","_msg_queue","_buffered_msg_queue","_sentMessages","_receivedMessages","_notify_msg_sent","_message_identifier","_sequence","restore","connected","maxMessageIdentifier","connectOptions","hostIndex","onConnected","onConnectionLost","onMessageDelivered","onMessageArrived","traceFunction","_connectTimeout","sendPinger","receivePinger","_reconnectInterval","_reconnecting","_reconnectTimeout","disconnectedPublishing","disconnectedBufferSize","receiveBuffer","_traceBuffer","_MAX_TRACE_ENTRIES","connectOptionsMasked","_traceMask","uris","_doConnect","subscribe","filter","subscribeOptions","constructor","grantedQos","invocationContext","errorCode","errorMessage","timeOut","_requires_ack","_schedule_message","unsubscribe","unsubscribeOptions","messageCount","Object","sequence","unshift","disconnect","getTraceLog","Date","startTrace","stopTrace","wsurl","useSSL","uriParts","split","join","binaryType","onopen","_on_socket_open","onmessage","_on_socket_message","onerror","_on_socket_error","onclose","_on_socket_close","_process_queue","store","prefix","storedMessage","pubRecReceived","hex","messageBytes","payloadHex","JSON","stringify","value","parse","x","parseInt","pop","_socket_send","event","messages","_deframeMessages","_handleMessage","byteArray","newData","result","push","errorStack","stack","sentMessage","receivedMessage","sequencedMessages","msgId","sort","a","b","pubRelMessage","reconnected","_connected","_receivePublish","_receiveMessage","pubCompMessage","wireMessageMasked","pubAckMessage","pubRecMessage","reconnect","_reconnect","errorText","readyState","close","mqttVersionExplicit","slice","call","splice","record","severity","max","shift","traceObject","masked","traceObjectMasked","attr","Client","match","ipv6AddSBracket","clientIdLength","defineProperties","get","newOnConnected","newDisconnectedPublishing","newDisconnectedBufferSize","newOnConnectionLost","newOnMessageDelivered","newOnMessageArrived","trace","hosts","ports","stringPayload","usingURIs","test","ipv6","topic","payload","publish","isConnected","newPayload","isView","DataView","enumerable","newDestinationName","newQos","newRetained","newTopic","newDuplicate","g","self","window"],"sourceRoot":""}